diff -Naur Mesa-7.11.2/src/egl/wayland/wayland-drm/.gitignore Mesa-20120109_916e206/src/egl/wayland/wayland-drm/.gitignore
--- Mesa-7.11.2/src/egl/wayland/wayland-drm/.gitignore	1970-01-01 07:00:00.000000000 +0700
+++ Mesa-20120109_916e206/src/egl/wayland/wayland-drm/.gitignore	2012-01-11 17:16:56.000000000 +0700
@@ -0,0 +1,3 @@
+wayland-drm-client-protocol.h
+wayland-drm-server-protocol.h
+wayland-drm-protocol.c
diff -Naur Mesa-7.11.2/src/egl/wayland/wayland-drm/Makefile Mesa-20120109_916e206/src/egl/wayland/wayland-drm/Makefile
--- Mesa-7.11.2/src/egl/wayland/wayland-drm/Makefile	2011-10-15 07:43:58.000000000 +0700
+++ Mesa-20120109_916e206/src/egl/wayland/wayland-drm/Makefile	2012-01-11 17:16:56.000000000 +0700
@@ -16,8 +16,8 @@
 		-I$(TOP)/include
 
 # Generate protocol sources
-prefix=$(shell pkg-config --variable=prefix wayland-server)
-exec_prefx=$(shell pkg-config --variable=exec_prefix wayland-server)
+prefix=$(shell $(PKG_CONFIG) --variable=prefix wayland-server)
+exec_prefx=$(shell $(PKG_CONFIG) --variable=exec_prefix wayland-server)
 wayland_protocoldir = $(PWD)/protocol
 wayland_scanner=$(exec_prefix)/bin/wayland-scanner
 
diff -Naur Mesa-7.11.2/src/egl/wayland/wayland-drm/protocol/wayland-drm.xml Mesa-20120109_916e206/src/egl/wayland/wayland-drm/protocol/wayland-drm.xml
--- Mesa-7.11.2/src/egl/wayland/wayland-drm/protocol/wayland-drm.xml	2011-10-15 07:43:58.000000000 +0700
+++ Mesa-20120109_916e206/src/egl/wayland/wayland-drm/protocol/wayland-drm.xml	2012-01-11 17:16:56.000000000 +0700
@@ -32,10 +32,16 @@
   <interface name="wl_drm" version="1">
     <enum name="error">
       <entry name="authenticate_fail" value="0"/>
-      <entry name="invalid_visual" value="1"/>
+      <entry name="invalid_format" value="1"/>
       <entry name="invalid_name" value="2"/>
     </enum>
 
+    <enum name="format">
+      <entry name="argb32" value="0"/>
+      <entry name="premultiplied_argb32" value="1"/>
+      <entry name="xrgb32" value="2"/>
+    </enum>
+
     <!-- Call this request with the magic received from drmGetMagic().
          It will be passed on to the drmAuthMagic() or
          DRIAuthConnection() call.  This authentication must be
@@ -52,7 +58,7 @@
       <arg name="width" type="int"/>
       <arg name="height" type="int"/>
       <arg name="stride" type="uint"/>
-      <arg name="visual" type="object" interface="wl_visual"/>
+      <arg name="format" type="uint"/>
     </request>
 
     <!-- Notification of the path of the drm device which is used by
@@ -64,6 +70,10 @@
       <arg name="name" type="string"/>
     </event>
 
+    <event name="format">
+      <arg name="format" type="uint"/>
+    </event>
+
     <!-- Raised if the authenticate request succeeded -->
     <event name="authenticated"/>
   </interface>
diff -Naur Mesa-7.11.2/src/egl/wayland/wayland-drm/wayland-drm.c Mesa-20120109_916e206/src/egl/wayland/wayland-drm/wayland-drm.c
--- Mesa-7.11.2/src/egl/wayland/wayland-drm/wayland-drm.c	2011-10-15 07:43:58.000000000 +0700
+++ Mesa-20120109_916e206/src/egl/wayland/wayland-drm/wayland-drm.c	2012-01-11 17:16:56.000000000 +0700
@@ -37,7 +37,6 @@
 #include "wayland-drm-server-protocol.h"
 
 struct wl_drm {
-	struct wl_object object;
 	struct wl_display *display;
 
 	void *user_data;
@@ -49,20 +48,21 @@
 struct wl_drm_buffer {
 	struct wl_buffer buffer;
 	struct wl_drm *drm;
-	
+	uint32_t format;
+
 	void *driver_buffer;
 };
 
 static void
-buffer_damage(struct wl_client *client, struct wl_buffer *buffer,
+buffer_damage(struct wl_client *client, struct wl_resource *buffer,
 	      int32_t x, int32_t y, int32_t width, int32_t height)
 {
 }
 
 static void
-destroy_buffer(struct wl_resource *resource, struct wl_client *client)
+destroy_buffer(struct wl_resource *resource)
 {
-	struct wl_drm_buffer *buffer = (struct wl_drm_buffer *) resource;
+	struct wl_drm_buffer *buffer = resource->data;
 	struct wl_drm *drm = buffer->drm;
 
 	drm->callbacks->release_buffer(drm->user_data,
@@ -71,9 +71,9 @@
 }
 
 static void
-buffer_destroy(struct wl_client *client, struct wl_buffer *buffer)
+buffer_destroy(struct wl_client *client, struct wl_resource *resource)
 {
-	wl_resource_destroy(&buffer->resource, client, 0);
+	wl_resource_destroy(resource, 0);
 }
 
 const static struct wl_buffer_interface drm_buffer_interface = {
@@ -82,64 +82,72 @@
 };
 
 static void
-drm_create_buffer(struct wl_client *client, struct wl_drm *drm,
+drm_create_buffer(struct wl_client *client, struct wl_resource *resource,
 		  uint32_t id, uint32_t name, int32_t width, int32_t height,
-		  uint32_t stride, struct wl_visual *visual)
+		  uint32_t stride, uint32_t format)
 {
+	struct wl_drm *drm = resource->data;
 	struct wl_drm_buffer *buffer;
 
+	switch (format) {
+	case WL_DRM_FORMAT_ARGB32:
+	case WL_DRM_FORMAT_PREMULTIPLIED_ARGB32:
+	case WL_DRM_FORMAT_XRGB32:
+		break;
+	default:
+		wl_resource_post_error(resource,
+				       WL_DRM_ERROR_INVALID_FORMAT,
+				       "invalid format");
+		return;
+	}
+
 	buffer = calloc(1, sizeof *buffer);
 	if (buffer == NULL) {
-		wl_client_post_no_memory(client);
+		wl_resource_post_no_memory(resource);
 		return;
 	}
 
 	buffer->drm = drm;
 	buffer->buffer.width = width;
 	buffer->buffer.height = height;
-	buffer->buffer.visual = visual;
-	buffer->buffer.client = client;
-
-	if (!visual || visual->object.interface != &wl_visual_interface) {
-		wl_client_post_error(client, &drm->object,
-				     WL_DRM_ERROR_INVALID_VISUAL,
-				     "invalid visual");
-		return;
-	}
+	buffer->format = format;
 
 	buffer->driver_buffer =
 		drm->callbacks->reference_buffer(drm->user_data, name,
 						 width, height,
-						 stride, visual);
+						 stride, format);
 
 	if (buffer->driver_buffer == NULL) {
-		wl_client_post_error(client, &drm->object,
-				     WL_DRM_ERROR_INVALID_NAME,
-				     "invalid name");
+		wl_resource_post_error(resource,
+				       WL_DRM_ERROR_INVALID_NAME,
+				       "invalid name");
 		return;
 	}
 
 	buffer->buffer.resource.object.id = id;
 	buffer->buffer.resource.object.interface = &wl_buffer_interface;
-	buffer->buffer.resource.object.implementation = (void (**)(void))
-		&drm_buffer_interface;
+	buffer->buffer.resource.object.implementation =
+		(void (**)(void)) &drm_buffer_interface;
+	buffer->buffer.resource.data = buffer;
 
 	buffer->buffer.resource.destroy = destroy_buffer;
+	buffer->buffer.resource.client = resource->client;
 
-	wl_client_add_resource(client, &buffer->buffer.resource);
+	wl_client_add_resource(resource->client, &buffer->buffer.resource);
 }
 
 static void
 drm_authenticate(struct wl_client *client,
-		 struct wl_drm *drm, uint32_t id)
+		 struct wl_resource *resource, uint32_t id)
 {
+	struct wl_drm *drm = resource->data;
+
 	if (drm->callbacks->authenticate(drm->user_data, id) < 0)
-		wl_client_post_error(client, &drm->object,
-				     WL_DRM_ERROR_AUTHENTICATE_FAIL,
-				     "authenicate failed");
+		wl_resource_post_error(resource,
+				       WL_DRM_ERROR_AUTHENTICATE_FAIL,
+				       "authenicate failed");
 	else
-		wl_client_post_event(client, &drm->object,
-				     WL_DRM_AUTHENTICATED);
+		wl_resource_post_event(resource, WL_DRM_AUTHENTICATED);
 }
 
 const static struct wl_drm_interface drm_interface = {
@@ -148,12 +156,18 @@
 };
 
 static void
-post_drm_device(struct wl_client *client, 
-		struct wl_object *global, uint32_t version)
+bind_drm(struct wl_client *client, void *data, uint32_t version, uint32_t id)
 {
-	struct wl_drm *drm = (struct wl_drm *) global;
+	struct wl_drm *drm = data;
+	struct wl_resource *resource;
 
-	wl_client_post_event(client, global, WL_DRM_DEVICE, drm->device_name);
+	resource = wl_client_add_object(client, &wl_drm_interface,
+					&drm_interface, id, data);
+	wl_resource_post_event(resource, WL_DRM_DEVICE, drm->device_name);
+	wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_ARGB32);
+	wl_resource_post_event(resource, WL_DRM_FORMAT,
+			       WL_DRM_FORMAT_PREMULTIPLIED_ARGB32);
+	wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_XRGB32);
 }
 
 struct wl_drm *
@@ -169,10 +183,7 @@
 	drm->callbacks = callbacks;
 	drm->user_data = user_data;
 
-	drm->object.interface = &wl_drm_interface;
-	drm->object.implementation = (void (**)(void)) &drm_interface;
-	wl_display_add_object(display, &drm->object);
-	wl_display_add_global(display, &drm->object, post_drm_device);
+	wl_display_add_global(display, &wl_drm_interface, drm, bind_drm);
 
 	return drm;
 }
diff -Naur Mesa-7.11.2/src/egl/wayland/wayland-drm/wayland-drm.h Mesa-20120109_916e206/src/egl/wayland/wayland-drm/wayland-drm.h
--- Mesa-7.11.2/src/egl/wayland/wayland-drm/wayland-drm.h	2011-10-15 07:43:58.000000000 +0700
+++ Mesa-20120109_916e206/src/egl/wayland/wayland-drm/wayland-drm.h	2012-01-11 17:16:56.000000000 +0700
@@ -5,6 +5,7 @@
 #include "eglimage.h"
 
 #include <wayland-server.h>
+#include "wayland-drm-server-protocol.h"
 
 struct wl_drm;
 
@@ -13,7 +14,7 @@
 
 	void *(*reference_buffer)(void *user_data, uint32_t name,
 				  int32_t width, int32_t height,
-				  uint32_t stride, struct wl_visual *visual);
+				  uint32_t stride, uint32_t format);
 
 	void (*release_buffer)(void *user_data, void *buffer);
 };
diff -Naur Mesa-7.11.2/src/egl/wayland/wayland-egl/wayland-egl.c Mesa-20120109_916e206/src/egl/wayland/wayland-egl/wayland-egl.c
--- Mesa-7.11.2/src/egl/wayland/wayland-egl/wayland-egl.c	2012-01-11 16:22:41.064000716 +0700
+++ Mesa-20120109_916e206/src/egl/wayland/wayland-egl/wayland-egl.c	2012-01-11 17:16:56.000000000 +0700
@@ -17,8 +17,7 @@
 
 WL_EGL_EXPORT struct wl_egl_window *
 wl_egl_window_create(struct wl_surface *surface,
-		     int width, int height,
-		     struct wl_visual *visual)
+		     int width, int height)
 {
 	struct wl_egl_window *egl_window;
 
@@ -27,7 +26,6 @@
 		return NULL;
 
 	egl_window->surface = surface;
-	egl_window->visual  = visual;
 	wl_egl_window_resize(egl_window, width, height, 0, 0);
 	egl_window->attached_width  = 0;
 	egl_window->attached_height = 0;
@@ -52,8 +50,7 @@
 }
 
 WL_EGL_EXPORT struct wl_egl_pixmap *
-wl_egl_pixmap_create(int width, int height,
-		     struct wl_visual *visual, uint32_t flags)
+wl_egl_pixmap_create(int width, int height, uint32_t flags)
 {
 	struct wl_egl_pixmap *egl_pixmap;
 
@@ -63,7 +60,6 @@
 
 	egl_pixmap->width   = width;
 	egl_pixmap->height  = height;
-	egl_pixmap->visual  = visual;
 
 	egl_pixmap->destroy = NULL;
 	egl_pixmap->buffer  = NULL;
diff -Naur Mesa-7.11.2/src/egl/wayland/wayland-egl/wayland-egl-priv.h Mesa-20120109_916e206/src/egl/wayland/wayland-egl/wayland-egl-priv.h
--- Mesa-7.11.2/src/egl/wayland/wayland-egl/wayland-egl-priv.h	2011-10-15 07:43:58.000000000 +0700
+++ Mesa-20120109_916e206/src/egl/wayland/wayland-egl/wayland-egl-priv.h	2012-01-11 17:16:56.000000000 +0700
@@ -16,7 +16,6 @@
 
 struct wl_egl_window {
 	struct wl_surface *surface;
-	struct wl_visual *visual;
 
 	int width;
 	int height;
@@ -28,7 +27,6 @@
 };
 
 struct wl_egl_pixmap {
-	struct wl_visual *visual;
 	struct wl_buffer *buffer;
 
 	int width;
