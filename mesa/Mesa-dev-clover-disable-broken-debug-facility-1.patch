--- a/src/gallium/state_trackers/clover/llvm/invocation.cpp.orig	2014-11-25 01:00:44.213862711 +0000
+++ b/src/gallium/state_trackers/clover/llvm/invocation.cpp	2014-11-25 01:36:21.537807359 +0000
@@ -119,7 +119,7 @@
       return module::deserialize(cs);
    }
 #endif
-   void debug_log(const std::string &msg, const std::string &suffix) {
+/*   void debug_log(const std::string &msg, const std::string &suffix) {
       const char *dbg_file = debug_get_option("CLOVER_DEBUG_FILE", "stderr");
       if (!strcmp("stderr", dbg_file)) {
          std::cerr << msg;
@@ -128,6 +128,7 @@
         file << msg;
        }
    }
+*/
 
    llvm::Module *
    compile_llvm(llvm::LLVMContext &llvm_ctx, const std::string &source,
@@ -459,7 +460,7 @@
       return m;
    }
 
-   void
+/*   void
    emit_code(LLVMTargetMachineRef tm, LLVMModuleRef mod,
              LLVMCodeGenFileType file_type,
              LLVMMemoryBufferRef *out_buffer,
@@ -481,15 +482,18 @@
       }
    }
 
+*/
    std::vector<char>
    compile_native(const llvm::Module *mod, const std::string &triple,
-                  const std::string &processor, unsigned dump_asm,
+                  const std::string &processor, compat::string &r_log) {
+/*                  const std::string &processor, unsigned dump_asm,
                   compat::string &r_log) {
-
+*/
       std::string log;
       LLVMTargetRef target;
       char *error_message;
       LLVMMemoryBufferRef out_buffer;
+      LLVMBool err;
       unsigned buffer_size;
       const char *buffer_data;
       LLVMModuleRef mod_ref = wrap(mod);
@@ -509,7 +513,15 @@
          throw build_error();
       }
 
-      if (dump_asm) {
+      err = LLVMTargetMachineEmitToMemoryBuffer(tm, mod_ref, LLVMObjectFile,
+                                                &error_message, &out_buffer);
+
+      if (err) {
+          LLVMDisposeTargetMachine(tm);
+          r_log = std::string(error_message);
+          LLVMDisposeMessage(error_message);
+          throw build_error();
+/*      if (dump_asm) {
          LLVMSetTargetMachineAsmVerbosity(tm, true);
          LLVMModuleRef debug_mod = wrap(llvm::CloneModule(mod));
          emit_code(tm, debug_mod, LLVMAssemblyFile, &out_buffer, r_log);
@@ -520,9 +532,11 @@
          LLVMSetTargetMachineAsmVerbosity(tm, false);
          LLVMDisposeMemoryBuffer(out_buffer);
          LLVMDisposeModule(debug_mod);
+*/
       }
 
-      emit_code(tm, mod_ref, LLVMObjectFile, &out_buffer, r_log);
+/*      emit_code(tm, mod_ref, LLVMObjectFile, &out_buffer, r_log);
+*/
 
       buffer_size = LLVMGetBufferSize(out_buffer);
       buffer_data = LLVMGetBufferStart(out_buffer);
@@ -662,6 +676,7 @@
    }
 } // End anonymous namespace
 
+/*
 #define DBG_CLC  (1 << 0)
 #define DBG_LLVM (1 << 1)
 #define DBG_ASM  (1 << 2)
@@ -673,6 +688,7 @@
                     "PIPE_SHADER_IR_NATIVE"},
 	DEBUG_NAMED_VALUE_END // must be last
 };
+*/
 
 module
 clover::compile_program_llvm(const compat::string &source,
@@ -683,8 +699,9 @@
                              compat::string &r_log) {
 
    init_targets();
-   static unsigned debug_flags = debug_get_flags_option("CLOVER_DEBUG",
+/*   static unsigned debug_flags = debug_get_flags_option("CLOVER_DEBUG",
                                                          debug_options, 0);
+*/
 
    std::vector<llvm::Function *> kernels;
    size_t processor_str_len = std::string(target.begin()).find_first_of("-");
@@ -709,7 +726,7 @@
 
    optimize(mod, optimization_level, kernels);
 
-   if (debug_flags & DBG_CLC)
+/*   if (debug_flags & DBG_CLC)
       debug_log(source, ".cl");
 
    if (debug_flags & DBG_LLVM) {
@@ -719,6 +736,7 @@
       s_log.flush();
       debug_log(log, ".ll");
     }
+*/
 
    module m;
    // Build the clover::module
@@ -732,8 +750,10 @@
          m = build_module_llvm(mod, kernels, address_spaces);
          break;
       case PIPE_SHADER_IR_NATIVE: {
-         std::vector<char> code = compile_native(mod, triple, processor,
+           std::vector<char> code = compile_native(mod, triple, processor, r_log);
+/*         std::vector<char> code = compile_native(mod, triple, processor,
 	                                         debug_flags & DBG_ASM, r_log);
+*/
          m = build_module_native(code, mod, kernels, address_spaces, r_log);
          break;
       }
