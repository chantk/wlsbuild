From 3f436a0395e952ac92eff99d69ba7dce36998b95 Mon Sep 17 00:00:00 2001
From: David Rosca <nowrep@gmail.com>
Date: Sat, 1 Aug 2015 18:49:33 +0200
Subject: [PATCH 30/36] X11: Use run-time detection of X11 platform

This should make it possible to run on Wayland without recompilation.
---
 src/lib/app/browserwindow.cpp | 64 +++++++++++++++++++++++++++----------------
 src/lib/lib.pro               |  2 +-
 src/lib/tools/qztools.cpp     | 32 ++++++++++------------
 src/lib/tools/qztools.h       |  2 +-
 4 files changed, 57 insertions(+), 43 deletions(-)

diff --git a/src/lib/app/browserwindow.cpp b/src/lib/app/browserwindow.cpp
index 2b3106e..99c59ba 100644
--- a/src/lib/app/browserwindow.cpp
+++ b/src/lib/app/browserwindow.cpp
@@ -94,6 +94,7 @@
 #endif
 
 #ifdef QZ_WS_X11
+#include <QX11Info>
 #include <X11/Xlib.h>
 #include <X11/Xatom.h>
 #endif
@@ -520,15 +521,17 @@ void BrowserWindow::loadSettings()
 
     // Transparency on X11 (no blur like on Windows)
 #ifdef QZ_WS_X11
-    setAttribute(Qt::WA_TranslucentBackground);
-    setAttribute(Qt::WA_NoSystemBackground, false);
-    QPalette pal = palette();
-    QColor bg = pal.window().color();
-    bg.setAlpha(180);
-    pal.setColor(QPalette::Window, bg);
-    setPalette(pal);
-    ensurePolished(); // workaround Oxygen filling the background
-    setAttribute(Qt::WA_StyledBackground, false);
+    if (QzTools::isPlatformX11()) {
+        setAttribute(Qt::WA_TranslucentBackground);
+        setAttribute(Qt::WA_NoSystemBackground, false);
+        QPalette pal = palette();
+        QColor bg = pal.window().color();
+        bg.setAlpha(180);
+        pal.setColor(QPalette::Window, bg);
+        setPalette(pal);
+        ensurePolished(); // workaround Oxygen filling the background
+        setAttribute(Qt::WA_StyledBackground, false);
+    }
 #endif
 
 #ifdef Q_OS_WIN
@@ -1543,13 +1546,17 @@ void BrowserWindow::closeTab()
 QByteArray BrowserWindow::saveState(int version) const
 {
 #ifdef QZ_WS_X11
-    QByteArray data;
-    QDataStream stream(&data, QIODevice::WriteOnly);
+    if (QzTools::isPlatformX11()) {
+        QByteArray data;
+        QDataStream stream(&data, QIODevice::WriteOnly);
 
-    stream << QMainWindow::saveState(version);
-    stream << getCurrentVirtualDesktop();
+        stream << QMainWindow::saveState(version);
+        stream << getCurrentVirtualDesktop();
 
-    return data;
+        return data;
+    }
+    else
+        return QMainWindow::saveState(version);
 #else
     return QMainWindow::saveState(version);
 #endif
@@ -1558,16 +1565,21 @@ QByteArray BrowserWindow::saveState(int version) const
 bool BrowserWindow::restoreState(const QByteArray &state, int version)
 {
 #ifdef QZ_WS_X11
-    QByteArray windowState;
-    int desktopId = -1;
+    if (QzTools::isPlatformX11()) {
+        QByteArray windowState;
+        int desktopId = -1;
 
-    QDataStream stream(state);
-    stream >> windowState;
-    stream >> desktopId;
+        QDataStream stream(state);
+        stream >> windowState;
+        stream >> desktopId;
 
-    moveToVirtualDesktop(desktopId);
+        moveToVirtualDesktop(desktopId);
+
+        return QMainWindow::restoreState(windowState, version);
+    }
+    else
+        return QMainWindow::restoreState(state, version);
 
-    return QMainWindow::restoreState(windowState, version);
 #else
     return QMainWindow::restoreState(state, version);
 #endif
@@ -1576,7 +1588,10 @@ bool BrowserWindow::restoreState(const QByteArray &state, int version)
 #ifdef QZ_WS_X11
 int BrowserWindow::getCurrentVirtualDesktop() const
 {
-    Display* display = static_cast<Display*>(QzTools::X11Display(this));
+    if (!QzTools::isPlatformX11())
+        return 0;
+
+    Display* display = QX11Info::display();
     Atom actual_type;
     int actual_format;
     unsigned long nitems;
@@ -1604,12 +1619,15 @@ int BrowserWindow::getCurrentVirtualDesktop() const
 
 void BrowserWindow::moveToVirtualDesktop(int desktopId)
 {
+    if (!QzTools::isPlatformX11())
+        return;
+
     // Don't move when window is already visible or it is first app window
     if (desktopId < 0 || isVisible() || m_windowType == Qz::BW_FirstAppWindow) {
         return;
     }
 
-    Display* display = static_cast<Display*>(QzTools::X11Display(this));
+    Display* display = QX11Info::display();
 
     Atom net_wm_desktop = XInternAtom(display, "_NET_WM_DESKTOP", False);
     if (net_wm_desktop == None) {
diff --git a/src/lib/lib.pro b/src/lib/lib.pro
index feefcf6..cefac1e 100644
--- a/src/lib/lib.pro
+++ b/src/lib/lib.pro
@@ -1,5 +1,5 @@
 isEqual(QT_MAJOR_VERSION, 5) {
-    QT += webkitwidgets network widgets printsupport sql script gui-private
+    QT += webkitwidgets network widgets printsupport sql script
 } else {
     QT += core gui webkit sql network script concurrent
 }
diff --git a/src/lib/tools/qztools.cpp b/src/lib/tools/qztools.cpp
index e788963..f0b8c25 100644
--- a/src/lib/tools/qztools.cpp
+++ b/src/lib/tools/qztools.cpp
@@ -43,11 +43,9 @@
 
 #if QT_VERSION >= 0x050000
 #include <QUrlQuery>
-#include <qpa/qplatformnativeinterface.h>
-#else
-#include <QX11Info>
 #endif
 #ifdef QZ_WS_X11
+#include <QX11Info>
 #include <X11/Xlib.h>
 #include <X11/Xutil.h>
 #endif
@@ -830,30 +828,28 @@ QString QzTools::escape(const QString &string)
 #endif
 }
 
-void* QzTools::X11Display(const QWidget* widget)
+bool QzTools::isPlatformX11()
 {
-    Q_UNUSED(widget)
-
-#ifdef QZ_WS_X11
-#if QT_VERSION >= 0x050000
-    return qApp->platformNativeInterface()->nativeResourceForWindow("display", widget->windowHandle());
+#if QZ_WS_X11 && QT_VERSION >= 0x050200
+    return QX11Info::isPlatformX11();
+#elif QZ_WS_X11
+    return true;
 #else
-    return QX11Info::display();
-#endif
+    return false;
 #endif
-
-    return 0;
 }
 
 void QzTools::setWmClass(const QString &name, const QWidget* widget)
 {
 #ifdef QZ_WS_X11
-    QByteArray nameData = name.toUtf8();
+    if (isPlatformX11()) {
+        QByteArray nameData = name.toUtf8();
 
-    XClassHint classHint;
-    classHint.res_name = const_cast<char*>(nameData.constData());
-    classHint.res_class = const_cast<char*>("QupZilla");
-    XSetClassHint((Display*)X11Display(widget), widget->winId(), &classHint);
+        XClassHint classHint;
+        classHint.res_name = const_cast<char*>(nameData.constData());
+        classHint.res_class = const_cast<char*>("QupZilla");
+        XSetClassHint(QX11Info::display(), widget->winId(), &classHint);
+    }
 #else
     Q_UNUSED(name)
     Q_UNUSED(widget)
diff --git a/src/lib/tools/qztools.h b/src/lib/tools/qztools.h
index bbb93d0..59d47e0 100644
--- a/src/lib/tools/qztools.h
+++ b/src/lib/tools/qztools.h
@@ -89,7 +89,7 @@ public:
     static bool isCertificateValid(const QSslCertificate &cert);
     static QString escape(const QString &string);
 
-    static void* X11Display(const QWidget* widget);
+    static bool isPlatformX11();
     static void setWmClass(const QString &name, const QWidget* widget);
 
     template <typename T>
-- 
2.5.1

