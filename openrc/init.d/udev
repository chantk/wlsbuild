#!/sbin/openrc-run
# This is a script to initialize udev, which populates the /dev
# directory with device nodes, scans for devices, loads the
# appropriate kernel modules, and configures the devices.

command_args="--daemon ${udev_opts}"
description="udev manages device permissions and symbolic links in /dev"
extra_started_commands="reload"
description_reload="Reload the udev rules and databases"

udev_monitor="${udev_monitor:-no}"
udevmonitor_log=/run/udevmonitor.log
udevmonitor_pid=/run/udevmonitor.pid

depend()
{
	# we depend on udev-mount explicitly, not dev-mount generic as we don't
	# want mdev as a dev-mount provider to come in.
	provide dev
	need sysfs udev-mount
	before checkfs fsck

	# udev does not work inside vservers
	keyword -vserver -lxc
}

#PATH="/sbin:/bin"

. /etc/udev/udev.conf

# remove trailing slash from udev_root
UDEV_ROOT=$(echo "${udev_root}" |sed 's/\/*$//')

check_mounted() {
  grep -E -q "^[^[:space:]]+ $1 $2" /proc/mounts
  return $?	
}

mount_devpts() {
  if ! check_mounted $UDEV_ROOT/pts devpts ; then
    mkdir $UDEV_ROOT/pts 2> /dev/null
    mount -n -o mode=0620,gid=5 -t devpts devpts $UDEV_ROOT/pts
  fi
}

start() {
    # Sanity check #1, udev requires that the kernel support devtmpfs:
    if ! grep -wq devtmpfs /proc/filesystems ; then
	exit 1
    fi

    # Sanity check #2, udev requires that the kernel support tmpfs:
    if ! grep -wq tmpfs /proc/filesystems ; then
	exit 1
    fi

    # Sanity check #3, make sure that a 2.6.x kernel is new enough:
    if [ "$(uname -r | cut -f 1,2 -d .)" = "2.6" ]; then
	if [ "$(uname -r | cut -f 3 -d . | sed 's/[^[:digit:]].*//')" -lt "32" ]; then
	    exit 1
	fi
    fi

    # Sanity check #4, make sure the udev package was not removed.  If udevd
    # is not there, this will also shut off this script to prevent further
    # problems:
    if [ ! -x /sbin/udevd ]; then
	exit 1
    fi

    # Disable hotplug helper since udevd listens to netlink:
    if [ -e /proc/sys/kernel/hotplug ]; then
	echo "" > /proc/sys/kernel/hotplug
    fi

    if ! /sbin/pidof udevd 1>/dev/null 2>/dev/null; then # start udevd
	/sbin/udevd --daemon
	# Since udev is just now being started we want to use add events:
	# Call udevtrigger and udevsettle to do the device configuration:
	/sbin/udevadm trigger --type=subsystems --action=add
	/sbin/udevadm trigger --type=devices --action=add
    fi
}

stop() {
	udevadm control --exit 2>/dev/null
	#killall udevd 2>/dev/null
}

restart() {
	udevadm control --exit 2>/dev/null
	sleep 3
	udevd --daemon
}

reload() {
	udevadm control --reload
	cp --preserve=all --recursive --update /lib/udev/devices/* $UDEV_ROOT
}
